{"ast":null,"code":"// 모듈이 늘어난다 = 관리할 상태값이 하나 더 늘어난다.\n// 관리할 상태값이 하나 더 필요하다 => 모듈을 하나 추가해라\nimport { Map, List } from \"immutable\";\nimport { handleActions, createAction } from \"redux-actions\"; // 액션 타입 정하기\n\nconst ITEM_ADD = \"item/ADD\";\nconst ITEM_DELETE = \"item/DEL\";\nconst ITEM_COMPLETE = \"item/COMPLETE\"; // 액션 <--- 해당 액션을 발생시킬 컴포넌트 혹은 UI요소\n\nexport const add = createAction(ITEM_ADD);\nexport const del = createAction(ITEM_DELETE);\nexport const complete = createAction(ITEM_COMPLETE); // Map = 딕셔너리\n// {'id':1, 'content':'abc', 'complete':true}\n// List = 배열, 리스트\n// 리듀서 - 액션이 발생하면 어떻게 상태값을 바꿀거야?\n\nconst initState = List([]);\nexport default handleActions({\n  [ITEM_ADD]: (state, action) => {\n    // state에 새로운 todo item을 추가하자 - action.payload에 들어있는 값을 가지고\n    const {\n      id,\n      content,\n      meaning,\n      complete\n    } = action.payload;\n    return state.push(Map({\n      id,\n      content,\n      meaning,\n      complete\n    }));\n  },\n  [ITEM_DELETE]: (state, action) => {\n    //const id = action.payload;\n    const {\n      payload: id\n    } = action; // id값을 받아서 -> 해당 id값을 가진 아이템의 인덱스를 찾아서 그 아이템을 지웠다.\n    // immutable filter해당하는 애들만 반환한다.\n\n    return state.filter(item => item.get(\"id\") !== id);\n  },\n  [ITEM_COMPLETE]: (state, action) => {\n    // id값을 받아서 -> 해당 id값을 가진 아이템을 찾아서\n    // 그 아이템의 상태값을 바꾼 새 아이템을 만들고\n    // 전체 목록에서 해당 아이템만 바꿔치기한 새 목록을 만든다.\n    const {\n      payload: id\n    } = action; // index찾는다.\n\n    const index = state.findIndex(item => item.get(\"id\") === id);\n    return state.updateIn([index, \"complete\"], complete => !complete);\n  }\n}, initState);","map":{"version":3,"sources":["/Users/jakdu/react-tutorial/react-django-lesson/강사님답지/todo_redux/src/modules/item.js"],"names":["Map","List","handleActions","createAction","ITEM_ADD","ITEM_DELETE","ITEM_COMPLETE","add","del","complete","initState","state","action","id","content","meaning","payload","push","filter","item","get","index","findIndex","updateIn"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,EAAcC,IAAd,QAA0B,WAA1B;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,eAA5C,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,WAAW,GAAG,UAApB;AACA,MAAMC,aAAa,GAAG,eAAtB,C,CAEA;;AACA,OAAO,MAAMC,GAAG,GAAGJ,YAAY,CAACC,QAAD,CAAxB;AACP,OAAO,MAAMI,GAAG,GAAGL,YAAY,CAACE,WAAD,CAAxB;AACP,OAAO,MAAMI,QAAQ,GAAGN,YAAY,CAACG,aAAD,CAA7B,C,CACP;AACA;AACA;AACA;;AACA,MAAMI,SAAS,GAAGT,IAAI,CAAC,EAAD,CAAtB;AAEA,eAAeC,aAAa,CAC1B;AACE,GAACE,QAAD,GAAY,CAACO,KAAD,EAAQC,MAAR,KAAmB;AAC7B;AACA,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA,OAAN;AAAeC,MAAAA,OAAf;AAAwBN,MAAAA;AAAxB,QAAqCG,MAAM,CAACI,OAAlD;AACA,WAAOL,KAAK,CAACM,IAAN,CACLjB,GAAG,CAAC;AACFa,MAAAA,EADE;AAEFC,MAAAA,OAFE;AAGFC,MAAAA,OAHE;AAIFN,MAAAA;AAJE,KAAD,CADE,CAAP;AAQD,GAZH;AAaE,GAACJ,WAAD,GAAe,CAACM,KAAD,EAAQC,MAAR,KAAmB;AAChC;AACA,UAAM;AAAEI,MAAAA,OAAO,EAAEH;AAAX,QAAkBD,MAAxB,CAFgC,CAGhC;AACA;;AACA,WAAOD,KAAK,CAACO,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACC,GAAL,CAAS,IAAT,MAAmBP,EAA1C,CAAP;AACD,GAnBH;AAoBE,GAACP,aAAD,GAAiB,CAACK,KAAD,EAAQC,MAAR,KAAmB;AAClC;AACA;AACA;AACA,UAAM;AAAEI,MAAAA,OAAO,EAAEH;AAAX,QAAkBD,MAAxB,CAJkC,CAKlC;;AACA,UAAMS,KAAK,GAAGV,KAAK,CAACW,SAAN,CAAiBH,IAAD,IAAUA,IAAI,CAACC,GAAL,CAAS,IAAT,MAAmBP,EAA7C,CAAd;AACA,WAAOF,KAAK,CAACY,QAAN,CAAe,CAACF,KAAD,EAAQ,UAAR,CAAf,EAAqCZ,QAAD,IAAc,CAACA,QAAnD,CAAP;AACD;AA5BH,CAD0B,EA+B1BC,SA/B0B,CAA5B","sourcesContent":["// 모듈이 늘어난다 = 관리할 상태값이 하나 더 늘어난다.\n// 관리할 상태값이 하나 더 필요하다 => 모듈을 하나 추가해라\nimport { Map, List } from \"immutable\";\nimport { handleActions, createAction } from \"redux-actions\";\n\n// 액션 타입 정하기\nconst ITEM_ADD = \"item/ADD\";\nconst ITEM_DELETE = \"item/DEL\";\nconst ITEM_COMPLETE = \"item/COMPLETE\";\n\n// 액션 <--- 해당 액션을 발생시킬 컴포넌트 혹은 UI요소\nexport const add = createAction(ITEM_ADD);\nexport const del = createAction(ITEM_DELETE);\nexport const complete = createAction(ITEM_COMPLETE);\n// Map = 딕셔너리\n// {'id':1, 'content':'abc', 'complete':true}\n// List = 배열, 리스트\n// 리듀서 - 액션이 발생하면 어떻게 상태값을 바꿀거야?\nconst initState = List([]);\n\nexport default handleActions(\n  {\n    [ITEM_ADD]: (state, action) => {\n      // state에 새로운 todo item을 추가하자 - action.payload에 들어있는 값을 가지고\n      const { id, content, meaning, complete } = action.payload;\n      return state.push(\n        Map({\n          id,\n          content,\n          meaning,\n          complete,\n        })\n      );\n    },\n    [ITEM_DELETE]: (state, action) => {\n      //const id = action.payload;\n      const { payload: id } = action;\n      // id값을 받아서 -> 해당 id값을 가진 아이템의 인덱스를 찾아서 그 아이템을 지웠다.\n      // immutable filter해당하는 애들만 반환한다.\n      return state.filter((item) => item.get(\"id\") !== id);\n    },\n    [ITEM_COMPLETE]: (state, action) => {\n      // id값을 받아서 -> 해당 id값을 가진 아이템을 찾아서\n      // 그 아이템의 상태값을 바꾼 새 아이템을 만들고\n      // 전체 목록에서 해당 아이템만 바꿔치기한 새 목록을 만든다.\n      const { payload: id } = action;\n      // index찾는다.\n      const index = state.findIndex((item) => item.get(\"id\") === id);\n      return state.updateIn([index, \"complete\"], (complete) => !complete);\n    },\n  },\n  initState\n);\n"]},"metadata":{},"sourceType":"module"}