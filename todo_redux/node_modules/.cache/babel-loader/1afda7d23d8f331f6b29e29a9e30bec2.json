{"ast":null,"code":"// 모듈이 늘어난다 = 관리할 상태값이 하나 더 늘어난다.\n// 관리할 상태값이 하나 더 필요하다 => 모듈을 하나 추가해라\nimport { Map, List } from 'immutable';\nimport { handleActions, createAction } from 'redux-actions'; // 액션 타입 정하기\n\nconst ITEM_ADD = 'item/ADD';\nconst ITEM_DELETE = 'item/DEL';\nconst ITEM_COMPLETE = 'item/COMPLETE'; // 액션 <--- 해당 액션을 발생시킬 컴포넌트 혹은 UI요소\n\nexport const add = createAction(ITEM_ADD);\nexport const del = createAction(ITEM_DELETE);\nexport const complete = createAction(ITEM_COMPLETE); // Map = 딕셔너리\n// {'id':1, 'content':'abc', 'complete':true}\n// List = 배열, 리스트\n// 리듀서 - 액션이 발생하면 어떻게 상태값을 바꿀거야?\n\nconst initState = List([]);\nexport default handleActions({\n  [ITEM_ADD]: (state, action) => {\n    // state에 새로운 todo item을 추가하자 - action.payload에 들어있는 값을 가지고\n    const {\n      id,\n      content,\n      complete\n    } = action.payload;\n    return state.push(Map({\n      id,\n      content,\n      complete\n    }));\n  },\n  [ITEM_DELETE]: (state, action) => {\n    //const id = action.payload;\n    const {\n      payload: id\n    } = action; // id값을 받아서 -> 해당 id값을 가진 아이템의 인덱스를 찾아서 그 아이템을 지웠다.\n    // immutable filter해당하는 애들만 반환한다.\n\n    return state.filter(item => item.get('id') !== id);\n  },\n  [ITEM_COMPLETE]: (state, action) => {\n    // id값을 받아서 -> 해당 id값을 가진 아이템을 찾아서\n    // 그 아이템의 상태값을 바꾼 새 아이템을 만들고\n    // 전체 목록에서 해당 아이템만 바꿔치기한 새 목록을 만든다.\n    const {\n      payload: id\n    } = action; // index찾는다.\n\n    const index = state.findIndex(item => item.get('id') === id);\n    return state.updateIn([index, 'complete'], complete => !complete);\n  }\n}, initState);","map":{"version":3,"sources":["/Users/jakdu/react-tutorial/react-django-lesson/강사님답지/todo_redux/src/modules/item.js"],"names":["Map","List","handleActions","createAction","ITEM_ADD","ITEM_DELETE","ITEM_COMPLETE","add","del","complete","initState","state","action","id","content","payload","push","filter","item","get","index","findIndex","updateIn"],"mappings":"AAAA;AACA;AACA,SAAQA,GAAR,EAAaC,IAAb,QAAwB,WAAxB;AACA,SAAQC,aAAR,EAAuBC,YAAvB,QAA0C,eAA1C,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,WAAW,GAAG,UAApB;AACA,MAAMC,aAAa,GAAG,eAAtB,C,CAEA;;AACA,OAAO,MAAMC,GAAG,GAAGJ,YAAY,CAACC,QAAD,CAAxB;AACP,OAAO,MAAMI,GAAG,GAAGL,YAAY,CAACE,WAAD,CAAxB;AACP,OAAO,MAAMI,QAAQ,GAAGN,YAAY,CAACG,aAAD,CAA7B,C,CACP;AACA;AACA;AACA;;AACA,MAAMI,SAAS,GAAGT,IAAI,CAAC,EAAD,CAAtB;AAEA,eAAeC,aAAa,CAAC;AACzB,GAACE,QAAD,GAAY,CAACO,KAAD,EAAQC,MAAR,KAAmB;AAC3B;AACA,UAAM;AAACC,MAAAA,EAAD;AAAKC,MAAAA,OAAL;AAAcL,MAAAA;AAAd,QAA0BG,MAAM,CAACG,OAAvC;AACA,WAAOJ,KAAK,CAACK,IAAN,CAAWhB,GAAG,CAAC;AAClBa,MAAAA,EADkB;AAElBC,MAAAA,OAFkB;AAGlBL,MAAAA;AAHkB,KAAD,CAAd,CAAP;AAKH,GATwB;AAUzB,GAACJ,WAAD,GAAe,CAACM,KAAD,EAAQC,MAAR,KAAmB;AAC9B;AACA,UAAM;AAACG,MAAAA,OAAO,EAACF;AAAT,QAAeD,MAArB,CAF8B,CAG9B;AACA;;AACA,WAAOD,KAAK,CAACM,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,GAAL,CAAS,IAAT,MAAmBN,EAAxC,CAAP;AACH,GAhBwB;AAiBzB,GAACP,aAAD,GAAiB,CAACK,KAAD,EAAQC,MAAR,KAAmB;AAChC;AACA;AACA;AACA,UAAM;AAACG,MAAAA,OAAO,EAACF;AAAT,QAAeD,MAArB,CAJgC,CAKhC;;AACA,UAAMQ,KAAK,GAAGT,KAAK,CAACU,SAAN,CAAgBH,IAAI,IAAIA,IAAI,CAACC,GAAL,CAAS,IAAT,MAAmBN,EAA3C,CAAd;AACA,WAAOF,KAAK,CAACW,QAAN,CAAe,CAACF,KAAD,EAAQ,UAAR,CAAf,EAAoCX,QAAQ,IAAG,CAACA,QAAhD,CAAP;AACH;AAzBwB,CAAD,EA0BzBC,SA1ByB,CAA5B","sourcesContent":["// 모듈이 늘어난다 = 관리할 상태값이 하나 더 늘어난다.\n// 관리할 상태값이 하나 더 필요하다 => 모듈을 하나 추가해라\nimport {Map, List} from 'immutable';\nimport {handleActions, createAction} from 'redux-actions';\n\n// 액션 타입 정하기\nconst ITEM_ADD = 'item/ADD';\nconst ITEM_DELETE = 'item/DEL';\nconst ITEM_COMPLETE = 'item/COMPLETE';\n\n// 액션 <--- 해당 액션을 발생시킬 컴포넌트 혹은 UI요소\nexport const add = createAction(ITEM_ADD);\nexport const del = createAction(ITEM_DELETE);\nexport const complete = createAction(ITEM_COMPLETE);\n// Map = 딕셔너리\n// {'id':1, 'content':'abc', 'complete':true}\n// List = 배열, 리스트\n// 리듀서 - 액션이 발생하면 어떻게 상태값을 바꿀거야?\nconst initState = List([]);\n\nexport default handleActions({\n    [ITEM_ADD]: (state, action) => {\n        // state에 새로운 todo item을 추가하자 - action.payload에 들어있는 값을 가지고\n        const {id, content, complete} = action.payload;\n        return state.push(Map({\n            id,\n            content,\n            complete\n        }))\n    },\n    [ITEM_DELETE]: (state, action) => {\n        //const id = action.payload;\n        const {payload:id} = action;\n        // id값을 받아서 -> 해당 id값을 가진 아이템의 인덱스를 찾아서 그 아이템을 지웠다.\n        // immutable filter해당하는 애들만 반환한다.\n        return state.filter(item => item.get('id') !== id);\n    },\n    [ITEM_COMPLETE]: (state, action) => {\n        // id값을 받아서 -> 해당 id값을 가진 아이템을 찾아서\n        // 그 아이템의 상태값을 바꾼 새 아이템을 만들고\n        // 전체 목록에서 해당 아이템만 바꿔치기한 새 목록을 만든다.\n        const {payload:id} = action;\n        // index찾는다.\n        const index = state.findIndex(item => item.get('id') === id);\n        return state.updateIn([index, 'complete'], complete =>!complete);\n    }\n}, initState);"]},"metadata":{},"sourceType":"module"}